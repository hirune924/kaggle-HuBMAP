hydra:
    run:
        dir: /kqi/output/fold_${dataset.target_fold}
    sweep:
        dir: /kqi/output
        subdir: ${hydra.job.num}

model:
    class_name: segmentation_models_pytorch.Unet
    params: {encoder_name: efficientnet-b3, in_channels: 3, classes: 1}

dataset:
    cv_split:
        class_name: sklearn.model_selection.KFold
        params: {n_splits: 4, shuffle: false}
    augmentation:
        train:
            - class_name: albumentations.CropNonEmptyMaskIfExists
              params: {height: 1024, width: 1024, always_apply: true, p: 1.0}
            - class_name: albumentations.Resize
              params: {height: '${dataset.image_size}', width: '${dataset.image_size}', interpolation: 1, always_apply: true, p: 1.0}
            - class_name: albumentations.ShiftScaleRotate
              params: {}
            #- class_name: albumentations.MaskDropout
            #  params: {}
            - class_name: albumentations.RandomGridShuffle 
              params: {grid: [2, 2]}
            - class_name: albumentations.Blur
              params: {}
            - class_name: albumentations.InvertImg
              params: {p: 0.1}
            - class_name: albumentations.ElasticTransform
              params: {p: 0.3}
            - class_name: albumentations.Cutout
              params: {num_holes: 4, max_h_size: 200, max_w_size: 200, fill_value: 255, always_apply: false, p: 0.5}
            - class_name: albumentations.Flip
              params: {always_apply: false, p: 0.5}
            - class_name: albumentations.HueSaturationValue
              params: {hue_shift_limit: 20, sat_shift_limit: 30, val_shift_limit: 20, always_apply: false, p: 0.5}
            - class_name: albumentations.RandomBrightnessContrast
              params: {brightness_limit: 0.3, contrast_limit: 0.3, brightness_by_max: true, always_apply: false, p: 0.5}
            - class_name: albumentations.Normalize
              params: {mean: [0.485, 0.456, 0.406], std: [0.229, 0.224, 0.225], max_pixel_value: 255.0, always_apply: false, p: 1.0}
        valid: 
            - class_name: albumentations.CropNonEmptyMaskIfExists
              params: {height: 1024, width: 1024, always_apply: true, p: 1.0}
            - class_name: albumentations.Resize
              params: {height: '${dataset.image_size}', width: '${dataset.image_size}', interpolation: 1, always_apply: false, p: 1.0}
            - class_name: albumentations.Normalize
              params: {mean: [0.485, 0.456, 0.406], std: [0.229, 0.224, 0.225], max_pixel_value: 255.0, always_apply: false, p: 1.0}

training:
    scheduler:
        class_name: torch.optim.lr_scheduler.CosineAnnealingLR
        params: {T_max: 100}
    #loss:
    #    class_name: loss.boundary_loss.DC_and_HDBinary_loss
    #    params: {soft_dice_kwargs: {}, hd_kwargs: {}}